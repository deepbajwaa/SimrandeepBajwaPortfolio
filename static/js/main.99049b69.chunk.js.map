{"version":3,"sources":["components/SiteMenu.js","App.js","serviceWorker.js","index.js"],"names":["SubMenu","Menu","SiteMenu","theme","onClick","this","handleClick","mode","Item","icon","HomeOutlined","QuestionCircleOutlined","FileTextOutlined","DesktopOutlined","title","AuditOutlined","CodeOutlined","NotificationOutlined","ShareAltOutlined","MailOutlined","GithubOutlined","LinkedinOutlined","Component","Header","Layout","Sider","Content","App","state","collapsed","toggle","setState","className","style","minHeight","trigger","collapsible","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","margin","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qWAkBQA,EAAYC,IAAZD,QAiDOE,E,uKArCP,OACI,kBAAC,IAAD,CACAC,MAAM,OACNC,QAASC,KAAKC,YACdC,KAAK,UAEH,4BACE,8BAEF,kBAAC,IAAKC,KAAN,CAAWC,KAAM,kBAACC,EAAA,EAAD,OAAjB,QAGA,kBAAC,IAAKF,KAAN,CAAWC,KAAM,kBAACE,EAAA,EAAD,OAAjB,SAGA,kBAAC,IAAKH,KAAN,CAAWC,KAAM,kBAACG,EAAA,EAAD,OAAjB,UAGA,kBAACZ,EAAD,CAASS,KAAM,kBAACI,EAAA,EAAD,MAAqBC,MAAM,cACtC,kBAAC,IAAKN,KAAN,CAAWC,KAAM,kBAACM,EAAA,EAAD,OAAjB,aAEJ,kBAAC,IAAKP,KAAN,CAAWC,KAAM,kBAACO,EAAA,EAAD,OAAjB,YAGA,kBAAC,IAAKR,KAAN,CAAWC,KAAM,kBAACQ,EAAA,EAAD,OAAjB,UAGA,kBAACjB,EAAD,CAASS,KAAM,kBAACS,EAAA,EAAD,MAAsBJ,MAAM,eACvC,kBAAC,IAAKN,KAAN,CAAWC,KAAM,kBAACU,EAAA,EAAD,OAAjB,SACA,kBAAC,IAAKX,KAAN,CAAWC,KAAM,kBAACW,EAAA,EAAD,OAAjB,UACA,kBAAC,IAAKZ,KAAN,CAAWC,KAAM,kBAACY,EAAA,EAAD,OAAjB,kB,GAhCKC,a,oCClBfC,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,MAAOC,EAAYF,IAAZE,QA4CRC,E,4MAzCbC,MAAQ,CACNC,WAAW,G,EAGbC,OAAS,WACP,EAAKC,SAAS,CACZF,WAAY,EAAKD,MAAMC,a,uDAKzB,OACE,yBAAKG,UAAU,OACb,kBAAC,IAAD,CAAQC,MAAO,CAACC,UAAU,UACxB,kBAACT,EAAD,CAAOU,QAAS,KAAMC,aAAW,EAACP,UAAWxB,KAAKuB,MAAMC,WACtD,yBAAKG,UAAU,SACf,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAQA,UAAU,eAChB,kBAACT,EAAD,CAAQS,UAAU,0BACfK,IAAMC,cAAcjC,KAAKuB,MAAMC,UAAYU,IAAqBC,IAAkB,CACjFR,UAAW,UACX5B,QAASC,KAAKyB,UAGlB,kBAACJ,EAAD,CACEM,UAAU,yBACVC,MAAO,CACLQ,OAAQ,YACRC,QAAS,KAJb,kB,GA1BMpB,aCAEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99049b69.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport { Menu } from 'antd';\r\n\r\nimport {\r\n    HomeOutlined,\r\n    QuestionCircleOutlined,\r\n    FileTextOutlined,\r\n    DesktopOutlined,\r\n    AuditOutlined,\r\n    CodeOutlined,\r\n    NotificationOutlined,\r\n    ShareAltOutlined,\r\n    MailOutlined,\r\n    GithubOutlined,\r\n    LinkedinOutlined,\r\n  } from '@ant-design/icons';\r\n\r\nconst { SubMenu } = Menu;\r\n\r\n// const BadgeSvg = () => (\r\n//   <svg t=\"1602202520032\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"1275\" width=\"15\" height=\"20\" color=\"white\">\r\n//     <path d=\"M512 682.226915c-187.612402 0-341.113457-153.501056-341.113457-341.113457s153.501056-341.113457 341.113457-341.113457 341.113457 153.501056 341.113457 341.113457S699.612402 682.226915 512 682.226915zM512 85.278364C371.290699 85.278364 256.164907 200.404156 256.164907 341.113457s115.125792 255.835093 255.835093 255.835093 255.835093-115.125792 255.835093-255.835093S652.709301 85.278364 512 85.278364z\" p-id=\"1276\"></path><path d=\"M682.556729 1023.340372c-8.527836 0-12.791755 0-17.055673-4.263918L512 942.325926l-153.501056 76.750528c-12.791755 8.527836-29.847428 4.263918-42.639182 0C307.331926 1010.548617 298.804089 993.492944 298.804089 980.70119l0-383.752639c0-25.583509 17.055673-42.639182 42.639182-42.639182s42.639182 17.055673 42.639182 42.639182l0 315.529948 110.861874-55.430937c12.791755-4.263918 25.583509-4.263918 38.375264 0l110.861874 55.430937L644.181465 596.94855c0-25.583509 17.055673-42.639182 42.639182-42.639182s42.639182 17.055673 42.639182 42.639182l0 383.752639c0 12.791755-8.527836 29.847428-21.319591 38.375264C699.612402 1019.076454 691.084565 1023.340372 682.556729 1023.340372z\" p-id=\"1277\"></path>\r\n//   </svg>\r\n// );\r\n\r\n// const BadgeIcon = props => <Icon component={BadgeSvg}/>\r\n\r\nclass SiteMenu extends Component {\r\n    render() {\r\n        return (\r\n            <Menu \r\n            theme=\"dark\" \r\n            onClick={this.handleClick}\r\n            mode=\"inline\"\r\n            >\r\n              <ul>\r\n                <li></li>\r\n              </ul>\r\n              <Menu.Item icon={<HomeOutlined />}>\r\n                Home\r\n              </Menu.Item>\r\n              <Menu.Item icon={<QuestionCircleOutlined />}>\r\n                About\r\n              </Menu.Item>\r\n              <Menu.Item icon={<FileTextOutlined />}>\r\n                Resume\r\n              </Menu.Item>\r\n              <SubMenu icon={<DesktopOutlined />} title=\"Work-Terms\">\r\n                  <Menu.Item icon={<AuditOutlined />}>CaseWare</Menu.Item>\r\n              </SubMenu>\r\n              <Menu.Item icon={<CodeOutlined />}>\r\n                Projects\r\n              </Menu.Item>\r\n              <Menu.Item icon={<NotificationOutlined />}>\r\n                Awards\r\n              </Menu.Item>\r\n              <SubMenu icon={<ShareAltOutlined />} title=\"Other Links\">\r\n                  <Menu.Item icon={<MailOutlined />}>Email</Menu.Item>\r\n                  <Menu.Item icon={<GithubOutlined />}>GitHub</Menu.Item>\r\n                  <Menu.Item icon={<LinkedinOutlined />}>Linkedin</Menu.Item>\r\n              </SubMenu>\r\n            </Menu>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SiteMenu;","import React, { Component } from 'react';\nimport SiteMenu from './components/SiteMenu'\nimport './App.css';\n\nimport { Layout } from 'antd';\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n} from '@ant-design/icons';\n\nconst { Header, Sider, Content } = Layout;\n\nclass App extends Component {\n  state = {\n    collapsed: false,\n  };\n\n  toggle = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout style={{minHeight:\"100vh\"}}>\n          <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\n            <div className=\"logo\" />\n            <SiteMenu/>\n          </Sider>\n          <Layout className=\"site-layout\">\n            <Header className=\"site-layout-background\">\n              {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n                className: 'trigger',\n                onClick: this.toggle,\n              })}\n            </Header>\n            <Content\n              className=\"site-layout-background\"\n              style={{\n                margin: '24px 16px',\n                padding: 24,\n              }}\n            >\n              Content\n            </Content>\n          </Layout>\n        </Layout>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}